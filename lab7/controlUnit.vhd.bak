--controlUnit.vhd
library IEEE;
use IEEE.STD_LOGIC_1164.all;
entity controlUnit is port(
	reset, clk, nflg, zflg : in std_logic;
	opcode: in std_logic_vector(7 downto 0);
	load_ac, load_iru, load_irl, load_pc, incr_pc, fetch, store_mem: out std_logic;
	state: out std_logic_vector(2 downto 0)
	);
end controlUnit;

architecture behav of controlUnit is
	type state_type is (start, prepU, fetchU, prepL, fetchL);
	signal presentState, nextState: state_type;
	begin
	sync_proc: --synchronous process
		process(reset, clk)
			begin
				if reset = '1' then
					presentState <= start;
				elsif (clk'event and clk = '0') then
					presentState <= nextState;
				end if;
		end process;
	
	comb_proc:   -- combinational process
		process (present_state, next_state)
		begin
			case presentState is
				when start =>
					next_state <= prepU;
				when prepU =>
					-- MAR <= PC
					--if opcode = ?
					state <= “000”;
					fetch <= '1';
					store_mem <= '0';
					load_pc <= '1';
					incr_pc <= '0';
					
				when fetchU =>
					-- IRU <= MDR
					state <= “001”;
					fetch <= '1';
					store_mem <= '1';
					load_pc <= '0';
					incr_pc <= '1';
					load_iru <= '1';
					
				when prepL =>
					-- MAR <= PC
					state <= "010";
					fetch <= '0';
					store_mem <= '0';
					load_pc <= '1';
					incr_pc <= '0';
					
				when fetchL =>
					-- IRL <= MDR
					state <= "011";
					fetch <= '0';
					store_mem <= '1';
					load_pc <= '0';
					incr_pc <= '1';
					load_irl <= 1;
			end case;
		end process;
end behav;
